package ex1;

import java.util.HashMap;
import java.util.List;

import ex1.WGraph_DS;


public class WGraph_Algo implements weighted_graph_algorithms {
	private weighted_graph wg_alg;
	
	
	
	public WGraph_Algo() {
	}
	
	public WGraph_Algo(weighted_graph g) {
		wg_alg = g;
	}
	
	/**
     * Init the graph on which this set of algorithms operates on.
     * @param g
     */
    public void init(weighted_graph g) {
    	wg_alg = g;
    }

    /**
     * Return the underlying graph of which this class works.
     * @return
     */
    public weighted_graph getGraph() {
    	return wg_alg;
    }
    /**
     * Compute a deep copy of this weighted graph.
     * @return
     */
    public weighted_graph copy() {
    	weighted_graph g  = new WGraph_DS();
		for (node_info i : wg_alg.getV()) {	
			g.addNode(i.getKey());
		}
		for (node_info i : wg_alg.getV()) {
			int key = i.getKey(); 
			for (node_info j : wg_alg.getV(key)) {
				g.connect(key, j.getKey(),wg_alg.getEdge(key, j.getKey()));
			}
		}
		return g;
    }
    /**
     * Returns true if and only if (iff) there is a valid path from EVREY node to each
     * other node. NOTE: assume ubdirectional graph.
     * @return
     */
    public boolean isConnected() {
    	
    }
    /**
     * returns the length of the shortest path between src to dest
     * Note: if no such path --> returns -1
     * @param src - start node
     * @param dest - end (target) node
     * @return
     */
    public double shortestPathDist(int src, int dest) {
    	
    }
    /**
     * returns the the shortest path between src to dest - as an ordered List of nodes:
     * src--> n1-->n2-->...dest
     * see: https://en.wikipedia.org/wiki/Shortest_path_problem
     * Note if no such path --> returns null;
     * @param src - start node
     * @param dest - end (target) node
     * @return
     */
    public List<node_info> shortestPath(int src, int dest){
    	
    }

    /**
     * Saves this weighted (undirected) graph to the given
     * file name
     * @param file - the file name (may include a relative path).
     * @return true - iff the file was successfully saved
     */
    public boolean save(String file) {
    	
    }

    /**
     * This method load a graph to this graph algorithm.
     * if the file was successfully loaded - the underlying graph
     * of this class will be changed (to the loaded one), in case the
     * graph was not loaded the original graph should remain "as is".
     * @param file - file name
     * @return true - iff the graph was successfully loaded.
     */
    public boolean load(String file) {
    	
    }
}
